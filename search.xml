<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS Number类型的范围</title>
    <url>/2020/03/11/JS%20Number%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4/</url>
    <content><![CDATA[<p>之前踩到的一个坑。</p>
<p>js 中，不区分 int float 等等，只有一个 Number 类型。占 64 位（8 字节）。</p>
<p>数字类型采用 64 位浮点格式表示，我们可以利用 Number 对象的属性 Number.MAX_VALUE , Number.MIN_VALUE 来查看；JavaScript 中 Number 范围为正负 2 的 53 次方，也即从最小值-9007199254740992 到最大值+9007199254740992 之间的范围。−9007199254740992 and 9007199254740992 （即正负 2 的 53 次方）<br><img src="/images/js-number.png" alt="image-20200302172949558"></p>
<p>JavaScript 里的数字是采用 IEEE 754 标准的 64 位双精度浮点数。该规范定义了浮点数的格式，对于 64 位的浮点数在内存中的表示，最高的 1 位是符号位，接着的 11 位是指数，剩下的 52 位为有效数字，具体：</p>
<p>第 0 位：符号位， s 表示 ，0 表示正数，1 表示负数；<br>第 1 位到第 11 位：储存指数部分， e 表示 ；<br>第 12 位到第 63 位：储存小数部分（即有效数字），f 表示，<br>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。 IEEE 754 规定，有效数字第一位默认总是 1，不保存在 64 位浮点数之中。也就是说，有效数字总是 1.xx…xx 的形式，其中 xx..xx 的部分保存在 64 位浮点数之中，最长可能为 52 位。因此，JavaScript 提供的有效数字最长为 53 个二进制位（64 位浮点的后 52 位+有效数字第一位的 1）。</p>
<blockquote>
<p>即：由于有 11 位的指数位，可以表示很大的数值，但是超过 53 位大数的精度无法保证。</p>
<p>这样的规则会带来一些问题，比如浮点数的精度问题和大数问题。</p>
</blockquote>
<h3 id="浮点数精度问题"><a href="#浮点数精度问题" class="headerlink" title="浮点数精度问题"></a>浮点数精度问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> float1 = <span class="number">7.9</span>;</span><br><span class="line"><span class="keyword">const</span> float2 = <span class="number">0.8</span>;</span><br><span class="line"><span class="built_in">console</span>.log(float1 - float2); <span class="comment">//7.1000000000000005</span></span><br></pre></td></tr></table></figure>

<p><strong>发生的原因：</strong><br>首先，十进制的 7.9 和 0.8 都会被转换成二进制，但由于浮点数用二进制表达时是无穷的。标准的 64 位双精度浮点数的小数部分最多支持 53 位二进制位，所以浮点数小数位的限制而截断的二进制数字，进行运算后，再转换为十进制，就会产生误差。<br>这种问题根本原因是在于：计算机都是 0 或 1 标识，对于某浮点准确值，是通过不断增加位数去逼近该值。浮点数实现这种方式就是移位运算，所以不管是在表示还是运算时,都会出现误差。<br><strong>如何解决：</strong><br>1 简单的方法使用 toFixed<br>parseFloat((数学表达式).toFixed(digits))； // toFixed() 精度参数须在 0 与 20 之间<br>// 运行</p>
<h4 id="大数问题"><a href="#大数问题" class="headerlink" title="大数问题"></a>大数问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aa&#x3D;68406452651714150433  &#x2F;&#x2F;显示出aa&#x3D;68406452651714150000</span><br></pre></td></tr></table></figure>

<p>js 的 number 类型有个最大值（安全值）。即 2 的 53 次方，为 9007199254740992。如果超过这个值，那么 js 会出现不精确的问题。这个值为 16 位。</p>
<p>如果再大一些，达到指数位也无法显示这么大的数，就会变成 infinity（由于符号标志位是单独的，所以区分正负）</p>
<hr>
<p>网上找的说法：</p>
<p>JavaScript 能表示并进行精确算术运算的整数范围为：正负 2 的 53 次方，也即从最小值-9007199254740992 到最大值+9007199254740992 之间的范围；对于超过这个范围的整数，JavaScript 依旧可以进行运算，但却不保证运算结果的精度。值得注意的是，对于整数的位运算（比如移位等操作），JavaScript 仅支持 32 位整型数，也即从-2147483648 到+2147483647 之间的整数。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用备忘</title>
    <url>/2020/03/11/Hexo%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<p>万万没想到一小时后我竟不需要这个文章了。</p>
<ol>
<li><p>当我修改了_config.yml 后，想在本地看看效果时：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//Hexo路径下</span><br><span class="line">hexo g === hexo generate  //生成静态文件</span><br><span class="line">hexo s === hexo server    //启动服务器</span><br></pre></td></tr></table></figure>
</li>
<li><p>当我准备将它发布时：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean   //清除缓存文件和静态文件（public）。已生成的有时因为缓存问题，服务器更新不了主题</span><br><span class="line">hexo g</span><br><span class="line">hexo d ===hexo deploy //发布</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
